name: deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        shell: powershell
        env:
          NEXT_PUBLIC_MEDIA_API_URL: ${{ secrets.NEXT_PUBLIC_MEDIA_API_URL }}
          NEXT_PUBLIC_FILES_API_URL: ${{ secrets.NEXT_PUBLIC_FILES_API_URL }}
        run: |
          docker-compose build --build-arg NEXT_PUBLIC_MEDIA_API_URL=$env:NEXT_PUBLIC_MEDIA_API_URL --build-arg NEXT_PUBLIC_FILES_API_URL=$env:NEXT_PUBLIC_FILES_API_URL plex-dashboard

      - name: Deploy service
        shell: powershell
        env:
          NODE_ENV: production
          NEXT_PUBLIC_MEDIA_API_URL: ${{ secrets.NEXT_PUBLIC_MEDIA_API_URL }}
          NEXT_PUBLIC_FILES_API_URL: ${{ secrets.NEXT_PUBLIC_FILES_API_URL }}
        run: |
          "NEXT_PUBLIC_MEDIA_API_URL=$env:NEXT_PUBLIC_MEDIA_API_URL`nNEXT_PUBLIC_FILES_API_URL=$env:NEXT_PUBLIC_FILES_API_URL" | Out-File -Encoding utf8 .env.temp

          $containerExists = docker ps -a --filter "name=plex-dashboard" --format "{{.Names}}"
          if ($containerExists) {
            Write-Host "Stopping existing container"
            docker-compose stop plex-dashboard
            docker-compose rm -f plex-dashboard
          } else {
            Write-Host "Container doesn't exist, continuing..."
          }

          docker-compose --env-file .env.temp up -d plex-dashboard
          Remove-Item .env.temp

          docker-compose ps

      - name: Cleanup
        shell: powershell
        run: |
          docker image prune -f
